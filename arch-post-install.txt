########################################
1 ==> Login as root
########################################

  user = root
  password = from base install

########################################
2 ==> Restart network
########################################

  [Wired Connection]
  $ ip addr   ------>Check ip address

  [Wireless connection]

  ***For Dell Inspiron wi-fi instructions are in section 7.They are down there because other things need to be installed and setup first.***


########################################
3 ==> Configure repositories
########################################

  $ nano /etc/pacman.conf

  Uncomment these two lines:
   [multilib]
   Include = /etc/pacman.d/mirrorlist

  Sync pacman and the repositories:
   pacman -Syy
   pacman -Syu


########################################
4 ==> Add user
########################################

  $ useradd -m -g users -G wheel -s /bin/bash <username>   ----->Change username to actual name
  $ passwd <username>   ------>create password

 Configure sudo for all users in wheel group
  $ EDITOR=nano visudo
   uncomment the following line %wheel ALL=(ALL) ALL
   save and exit

  
########################################
5 ==> Install Reflector
########################################

  ***This section must be done while still logged in as root account***
  $ pacman -S git

  Clone repo containing install scripts
  Make sure <username> in the destination path matches the user created in step above
  $ git clone https://github.com/scousepie/arch-openbox /home/<username>/arch-openbox
  $ cd /home/<username>/arch-openbox/reflector
  run script reflector.sh
  $ ./reflector.sh

  Logout out of root account
  $ exit
  Login with user account created in step 4

  test internet connection and that sudo works
  $sudo pacman -Syu

  Although the above sets up reflector to update pacman mirrorlist being able to run
  it manually is sometimes needed if downloads are slow.
  $ nano ~/.bashrc
  Add next line to bottom of file 
  alias mirror='reflector --protocol https --latest 50 --number 20 --sort rate --save /etc/pacman.d/mirrorlist'
  Save and exit from nano
  $ source ~/.bashrc
  now typing mirror in bash terminal should update mirrorlist


########################################
6 ==> Install AUR-helpers
########################################


  Install yay
  -----------

  $ git clone https://aur.archlinux.org/yay.git
  $ cd yay
  $ makepkg -si
  
  To enable color output.

  $ sudo nano /etc/pacman.conf

Uncomment Color in misc options save and exit 

-----------------------------------------------------------

  Install aurman
  --------------

  $ git clone https://aur.archlinux.org/aurman.git
  $ cd aurman
  $ makepkg -si


  Fixing PGP signature error

  If you get

aurman_sources git repo ... FAILED (unknown public key 465022E743D71E39)
==> ERROR: One or more PGP signatures could not be verified!

  Many AUR packages contain lines to enable validating downloaded packages though the use of a PGP key. This establishes a level of trust between the software author and anyone who downloads the software - if you trust the key, and the download validates against the key, then you can trust the download.

  Pacman has its own keyring for system packages in the repos. This means pacman will trust Manjaro and Arch packager keys.

  Your user starts with an empty keyring. That is, you trust noone’s keys. When you run makepkg you run it as your normal user, so if the PKGBUILD file contains a PGP key validation will fail because you don’t trust the key - you have to import the key into your keyring first.

 This is easy. Open a terminal and type:

 $ gpg --recv-key $KEYID

 where $KEYID is the ID of the key you want to import.

  Now when you run makepkg (directly or via your AUR helper) the downloaded file will be validated and all will be well.

  If validation still fails then the file is invalid.
##############################################################


########################################
7 ==> Dell inspiron wi-fi setup
########################################

 install b43-classic wireless drivers 
 $ yay b43
 Unplug ethernet cable before rebooting
 $ reboot
 nmcli comes installed with NetworkManager which should already be installed  
 $ nmcli device wifi list
 Insert correct <SSID> and <password> for the network you want to connect to.
 $ nmcli device wifi connect <SSID> password <password>
 Sould get confirmation to confirm connection, just to make sure run following command and check wireless interface (usually starts with w) for ip address.
 $ip addr

########################################
8 ==> Installing xorg environment
########################################

  $ sudo pacman -S xorg-server xorg-xinit xorg-twm xterm
  Confirm and accept all default options
  Test by running startx
  $ startx
  type exit in first window to return to command line

########################################
9 ==> Installing everything else
########################################

  To install everything else just cd into the arch-openbox directory that you cloned in step 5, then just follow the scripts in order.
  To run a script make sure you are in the directory that contains the script you wamt to run and enter the following command:
  $ ./<scriptname.sh>
  remeber to change <scriptname.sh> to the actual scriptname

